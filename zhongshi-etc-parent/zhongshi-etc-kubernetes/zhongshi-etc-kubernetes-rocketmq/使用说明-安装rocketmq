1.克隆项目
git clone https://github.com/apache/rocketmq-operator.git
cd rocketmq-operator

2.部署 Operator
./install-operator.sh

3.创建数据卷（在nfs服务器上执行）
mkdir -p /data/rocketmq
chmod a+rw /data/rocketmq

nano /etc/exports
#底部添加
/data/rocketmq *(rw,sync,no_subtree_check,no_root_squash)

/etc/init.d/nfs-kernel-server restart

4.修改nfs配置文件
nano deploy/storage/nfs-client.yaml

#############内容 Begin###############

kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: nfs-client-provisioner
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
      serviceAccountName: nfs-client-provisioner
      containers:
        - name: nfs-client-provisioner
          # 默认为 quay.io 修改为 quay.azk8s.cn
          image: quay.azk8s.cn/external_storage/nfs-client-provisioner:latest
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: rocketmq/nfs
            - name: NFS_SERVER
              # 修改你自己的 NFS 服务器地址
              value: 192.168.141.130
            - name: NFS_PATH
              # 修改你自己的 NFS 共享目录
              value: /data/rocketmq
      volumes:
        - name: nfs-client-root
          nfs:
            # 修改你自己的 NFS 服务器地址
            server: 192.168.141.130
            # 修改你自己的 NFS 共享目录
            path: /data/rocketmq

#############内容 End#################

cd deploy/storage/
./deploy-storage-class.sh


5.部署 Cluster

nano example/rocketmq_v1alpha1_nameservice_cr.yaml
#############内容 Begin#############
apiVersion: rocketmq.apache.org/v1alpha1
kind: NameService
metadata:
  name: name-service
spec:
  # 集群实例的数量
  size: 1
  nameServiceImage: rocketmqinc/rocketmq-namesrv:4.5.0-alpine
  imagePullPolicy: Always
  # 默认为 HostPath 修改为 NFS
  storageMode: NFS
  hostPath: /data/rocketmq/nameserver
  volumeClaimTemplates:
    - metadata:
        name: namesrv-storage
        annotations:
          volume.beta.kubernetes.io/storage-class: rocketmq-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

#############内容 End###############

kubectl apply -f example/rocketmq_v1alpha1_nameservice_cr.yaml


6.部署 Broker
nano example/rocketmq_v1alpha1_broker_cr.yaml

##############内容 Begin##############

apiVersion: rocketmq.apache.org/v1alpha1
kind: Broker
metadata:
  name: broker
spec:
  # 集群实例的数量，默认为 2 修改为 1 (太吃内存了，按默认配置单跑一套需要 16G 内存)
  size: 2
  # 修改为你部署的 name-service-x 的地址
  nameServers: 192.168.141.123:9876
  replicationMode: ASYNC
  replicaPerGroup: 1
  brokerImage: rocketmqinc/rocketmq-broker:4.5.0-alpine
  imagePullPolicy: Always
  allowRestart: true
  # 默认为 HostPath 修改为 NFS
  storageMode: NFS
  hostPath: /data/rocketmq/broker
  scalePodName: broker-0-master-0
  volumeClaimTemplates:
    - metadata:
        name: broker-storage
        annotations:
          volume.beta.kubernetes.io/storage-class: rocketmq-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 8Gi
            
############内容 End############

kubectl apply -f example/rocketmq_v1alpha1_broker_cr.yaml


7.部署控制台
nano rocketmq-console.yaml
############内容 Begin############

kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: rocketmq-console
  labels:
    app: rocketmq-console
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rocketmq-console
  template:
    metadata:
      labels:
        app: rocketmq-console
    spec:
      containers:
      - name: rocketmq-console
        image: styletang/rocketmq-console-ng
        env:
        - name: JAVA_OPTS
          # 修改为你自己的 NameServer 地址
          value: -Drocketmq.namesrv.addr=192.168.141.123:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false
---
apiVersion: v1
kind: Service
metadata:
  name: rocketmq-service
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 32568
  selector:
    app: rocketmq-console

############内容 End##############

kubectl apply -f rocketmq-console.yaml








